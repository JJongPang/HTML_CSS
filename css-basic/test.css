/* CSS 기본 Syntex */
/* selector {
    property: value;
} */

/* Selectors */
/* 1.Type Selector(html tag selector) */
p {
    color: red;
}

strong {
    color: red;
}

/* 2.Class Selector */
/* <div class="box">
     요소 
    </div> */

    .box {
        color: aliceblue;
    }

/* <div class="box-0 box-1 box-2">
     3개의 클래스 
    </div> */
    .box {

    }
    .box-1 {

    }
    .box-2 {

    }
    .box.box-1 {

    }
    .box-0.box-2 {

    }
    .box-1.box-2 {

    }
    .box-0.box-1.box-2 {

    }
/* 3.ID Selector */
/* <div id="jonghyeon">
     id는 단 한개만 선언 할 수 있습니다. 
    </div> */
    #honghyeon {
        color: aliceblue;
    }

    /* Child(자식 선택자), Descendant(자손 선택자) & Sibling Combinators(형제 선택자) */
    /* 1.Child(parent > child) */
    section > h1 {
        color: aliceblue;
    }
    /* 2.Descendant(parent descendants) */
    section h1 {
        color: aliceblue;
    }
    /* 3.Sibling Combinators */
    /* 3-1.parent ~ sibling(active class 기준 하여 모든 li 형제 색깔 red로 변경) */
    .active ~ li {
        color: red;
    }  

    /* 3-2.parent + sibling(active class 기준 하여 다음 li 형제 하나만 색깔 red로 변경) */
    .active + li {
        color: red;
    }
    
    /* 4.Structural Pseudo-classes(가상 클래스) */
    /* 4-1. element:first-child */
    li:first-child {
        color:red;
    }
    /* 4-2. element:last-chbild */
    li:last-child {
        color: azure;
    }
    /* 4-3. element:nth-child(n) */
    li:nth-child(3) {
        color: red;
    }

    /* 5.User Action Pseudo-classes */
    /* 5--1.element:hover(마우스를 갔다 댔을때) */
    a:hover {
        background-color: blueviolet;
    }
    /* 5-2.element:focus(요소를 클릭했을때 focus되었을때 text-box생각하면 됨) */
    input:focus {
        background-color: red;
    }

    /* 5-3.element:active(마우스를 클릭했을때) */
    a:active {
        background-color: aquamarine;
    }

    /* 5-4: style breaker
    1.inline style
    2.!important */


    /* 6.BOX model */
    /* 1.margin
    2.padding
    3.border
    4.content     */

    /* 7.BOX Sizing */
    * {
        /* 기본값 */
        box-sizing: content-box;
        /* border-box = border영역까지 가로 세로 */
    }

    /* 8. Box */
    /* Box-Type => display */

    /* 8-1: Block(길막) */
    /* 따로 width를 선언하지 않을 경우, width=부모의 content-box의 100% */
    /* 따로 width를 선언한 경우, 남은 공간은 margin으로 자동으로 채움 */
    /* margin: 0 auto */





    
    /* 따로 부모의 height를 선언하지 않을 겨우, 자식 요소의 height의 합 = 부모의 height */

    /* 8-2: Inline(흐름) */
    /* margin padding border(top, bottom) 사용 금지 */

    /* 8-3: Inline Block(block + inline) */

    /* 9. float(가로배치) */
   /* float을 할 시 inline-block, inline이든 block으로 신분 변환한다. 하지만 block의 기능 margin은 생성되지 않는다 
   즉(길막)을 하진 못한다. 또한 부모는 자식들의 합 만큼 높이를 가지고 있으며 float 사용시 자식은 붕 뜨기 때문에 그만큼
   높이가 감소한다.*/
   
   /* float fix*/
    /*overflow:hidden => 부모가 집나간 자식을 찾는다.  */
    /* clear(left, right, both) => display가 항상 block 상태여야만 합니다. */

    /* @@@@꿀팁 가상요소 만들기@@@@ */
    /* ::befor, ::after(필수요소 : content) */
    .presudo::befor {
        content: "@";
    }

    /* 10. position(원하는 위치에 자유롭게 이동시키기 위함) */
    /* 10-1.static
    모든 요소의 기본 포지션 값 */

    /* 10-2.relative
    float과 는 다르게 자기 자신의 자리를 기억하고 있으며 위아래(top, bottom, right, left) 이동 가능 */

    /* 10-3.absolute
    3-1 display는 block로 변환 됨. 다른 영역에 지장안줌
    3-2 자신이 기준점을 삶고 싶은 기준을 정할수 있습니다. 기준점은 포지션이 static이 아닌 요소 */

    /* 10-4.fixed */
    /* 4-1.absolute와 동일함
       4-2.absolute와 다른점은 자신의 기준점이 명확합니다. viewport기준이며 그위치에 고정  */

    /* 10-5.z-index
    포지션 요소 수직방향 레벨 위치를 알려줍니다. 
    ex) z-index : 1
    ex) z-index : 2 => 1앞으로 수직으로 올라감
    */

    /* @@@@@@꿀팁 transform */
    /* 위치선정시 사용하며 요소 변형*/

    /* @@@@@@꿀팁 text-align */
    /* 글자위치 선정 */


    /* 11.FlexBox */
    .flexbox {
        display: flex;
        /* flex | inline-flex */
    }

    /* 가로정렬, 세로정렬 */
    .flexbox {
        display: flex;
        flex-direction: row;
        /* row(가로) | row-reverse | column(세로) | column-reverse */
        /* row - Main axis(가로 축):justify-content, Cross axis(세로 축):align-items, align-content */
        /* column - Main axis(세로 축):justify-content, Cross axis(가로 축):align-items, align-content(flex-wrap : wrap)=>간격 무시 조정  */
    }

    /* 한줄안에 모든 요소에 정렬 할것인지? */
    .flexbox {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        /* nowrap(기본값)(사이즈를 줄여서라도 한줄로 정렬) | wrap(줄 변경 하며 정렬) */
    }

    /* @@flex-grow 플렉스 후 남은 공간 을 차지할 것인지?@@ */

    /* order */
    /* 원하는데로 순서 매김 */


    /* 12. Midia Query */
    /* 반응형 웹 을 만들기 위함
    html: viewport  선언
    css: media query 선언 */

    /* 가로길이가 768이상 */
    @media screen and (min-width: 768px) {

    }

    @media screen and (min-width: 768px) and (max-width: 800px) {
        
    }

    /* Typography */
    /* 텍스트 디자인 */
    /* 1.Essentials
    1-1. line-height(줄간격) - px, *em*, rem => 줄간격에 가운데 배치(em 생략)
    1-2. letter-spacing(글자와 글자사이 자간) px, *em*
    1-3. font-size - 글씨 크기(px(절대 단위), em(상대단위, 실제로 적용된 폰트사이즈), rem(상대단위, html에 적용된 em))(em 생략 안됨)
    1-4. baseline
    1-5. font-family(폰트 서체) => 서체
    1-6. font-weigth(폰트 굵기) => 400(regular) 700(bold) 900(black)
    1-7. color(글자 색상) => hex(#0066f), rgb(0, 102, 255), rgba(0, 102, 255, 1(투명도))
    
    2.etc
    2-1. text-align - 텍스트 정렬(left, center, right)
    2-2. text-indent - 들여쓰기(px)
    2-3. text-transform - 텍스트 변환(none, capitalize(앞자리 대문자), uppercase(대문자), lowercase(소문자))
    2-4. text-decoration - none, under-line, line-through, overline
    2-5. font-style - normal, *italic(기울기)*, oblique
    
    3. Webfont 
    3-1. 직접 가져다 사용하기
    3-2. 직접 쓰기 */
    @font-face {
        font-famaily: "사용자 직접 입력";
        font-style: "normal";
        font-weight: 400;
        src:  url("경로") format("사용자 확장자 환경");
    }

    /* Background
    1. background-color = <hex, rgb, rgba>
    2. background-image = url("경로")
    3. background-repeat = 이미지 => repeat(기본 갑), no-repeat(반복 원하지 않는 경우)
    4. background-size = 이미지 사이즈 => contain, cover, custom
    5. background-position = 이미지 위치 => x, y  */

    /* Transition(property 속성에 맞게 휙 바뀌는게 아닌 스르륵 전환 하는 것)
    property(css속성), duration(지속시간<ms, s>), [timing-function](ease-in, ease-out, ease-in-out, cubic-bezier(커스텀)), [delay]
    
    ex) */
    .box {
        background-color: blue;
        font-size: 10px;
        transition: all 2500ms cubic-benzier(0.08, 0.57, 0.97, -0.78) 1000ms;
        transition: font-size  2500ms ease-in, background-color 2500ms cubic-benzier(0.08, 0.57, 0.97, -0.78) 1000ms;
    }

    .box.active {
        font-size: 30px;
        background-color: pink;
    }



    /* animation */
    /* <Transition 동일, iteration-count(되풀이를 몇번할거냐)(infinite무한대)>, direction(방향지정)<alternate> 왔다갔다(from to, to from from to.....) */

    .box {
        position: relative;
        background-color: black;
        animation-name: name;
        animation-duration: 2000ms;
        animation-timing-function: ease-in-out;
        animation-delay: 1000ms;
        animation-iteration-count: infinite;
        animation-direction: alternate;
    }

    @keyframes name {
        from {
            /* rule */
            top: 0;
            background-color: black;
        }

        to {
            /* rule */
            top: 200px;
            background-color: pink;
        }
    } 

    @keyframes name {
        0% {
            /* rule */
        }

        50% {
            /* rule */
        }

        100% {
            /* rule */
        }
    } 


    /* Boxs Shadow(neomorphism) */
    /* h-offset, v-offset, blur, spread, color
    x y 흐린정도(blur) 그림자 사이즈 색상
    box-shadow: 0 10px 16px 0 rgba(19, 206, 102, 0.35) */

    /* opacity */
    /* 투명도 */

    /* overflow */
    /* with, height 자손요소들이 넘쳤을때의 처리  */
    /* visible: 기본값
    auto, scroll: 넘쳐흘렀을때 알아서 처리해라, 알아럿 scroll 표시해라(overflow-x, overflow-y)
    hittder: 넘쳐흘렀을때 싹 잘라서 숨겨버려라 */


    /* Transform */
    /* 모형 변환 */
    /* translate(x, y)이동하기 전 위치를 기억하며 내가 원하는 방향으로 옮기는 법(자기 사이즈가 기준)
    scale(N), scale(x, y) 자기 사이즈 조정
    rotate(Ndeg) 각도조절 => ex)rotate(45deg) */

    /* Visible */
    /* 보여줄거냐, 안보여 줄거냐
    visible: 보여주기
    hidden: 없애기 */



    /* Grid System */
    /* 디자이너들이 디자인 할 때 사용하는 것

    container: 전체 범위

    column: 1칸 

    gutter: 컬럼에 여백주기 */



    /* Bootstrap */
    /* 그리드 시스템 프레임 워크 */
    /* 규칙 */
    /* <div class="container">
       <div class="row">
           <div class="col-1">
               <p>col-1</p>
           </div>
       </div>
    </div> */

